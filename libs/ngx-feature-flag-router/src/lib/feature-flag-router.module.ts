import { ANALYZE_FOR_ENTRY_COMPONENTS, forwardRef, ModuleWithProviders, NgModule, Optional, Type } from "@angular/core";
import { Router, RouterModule, ROUTES } from "@angular/router";
import { featureFlagRoutesFactory } from "./factories";
import { FactoryService, FeatureFlagRoutes, FeatureFlagRoutesService } from "./models";
import { FeatureFlagRoutesFactoryService, DefaultFeatureFlagRoutesService } from "./services";

/**
 * You should use `FeatureRouterModule` instead of `RouterModule`
 * when you want to conditionally lazy-load `NgModules` based on a feature flag
 *
 * This feature flag can be a function where its return value determines which `loadChildren` function to use for lazy-loading:
 * 1. `() => boolean`
 * 2. `() => Observable<boolean>`
 *
 * You can also inject a Service that extends `FeatureFlagRoutesService` for more complex logic
 * i.e. use `HttpClient`, etc: `FeatureRouterModule.forChild([...], SomeService)`
 *
 * Adds the same directives and providers as `RouterModule` and can be used interchangeably to lazy-loaded bundles for an `NgModule`:
 *
 * `FeatureRouterModule.forChild(...)`
 *
 * Unlike `RouterModule`, `FeatureFlagRouterModule` does not have a forRoot() method.
 *
 * For FeatureFlagRouterModule.forChild() to function properly, you have to call RouterModule.forRoot() in some parent `NgModule`
 * just like you would if you wanted to use RouterModule.forChild()
 *
 * @see `RouterModule`
 */
@NgModule({
    exports: [RouterModule],
    providers: [DefaultFeatureFlagRoutesService],
})
export class FeatureFlagRouterModule {
    // Angular's `RouterModule` injects Router so it gets created eagerly,
    // so `FeatureFlagRouterModule` will do so as well
    // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function
    constructor(@Optional() router: Router) {}

    /**
     * Creates a module with all the router directives and a provider registering routes,
     * without creating a new Router service.
     * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:
     *
     * ```
     * @NgModule({
     *   imports: [FeatureFlagRouterModule.forChild(ROUTES)]
     * })
     * class MyNgModule {}
     * ```
     *
     * You can also provide a service to unshift additional `Route` objects for more complex situations:
     * ```
     * @NgModule({
     *   imports: [FeatureFlagRouterModule.forChild(ROUTES, MyService)]
     * })
     * class MyNgModule {}
     * ```
     *
     * @param routes An array of `FeatureFlagRoutes` objects that define the navigation paths for the submodule.
     * `FeatureFlagRoutes` objects are `Route` with extra options
     * @param featureFlagRoutesService (Optional) Service used to generate an array of `FeatureFlagRoutes` objects.
     * The array generated by `featureFlagRoutesService` will be combined with `routes` argument: `[...serviceRoutes, ...routes]`
     * @return The new NgModule.
     *
     */
    static forChild(
        routes: FeatureFlagRoutes,
        featureFlagRoutesService?: Type<FeatureFlagRoutesService>,
    ): ModuleWithProviders<FeatureFlagRouterModule> {
        const serviceType = featureFlagRoutesService || DefaultFeatureFlagRoutesService;

        return {
            ngModule: FeatureFlagRouterModule,
            providers: [
                {
                    provide: FeatureFlagRoutesService,
                    useExisting: forwardRef(() => serviceType),
                },
                FeatureFlagRoutesFactoryService,
                {
                    provide: FactoryService,
                    useClass: FeatureFlagRoutesFactoryService,
                },
                {
                    provide: ROUTES,
                    useFactory: featureFlagRoutesFactory(routes),
                    multi: true,
                    deps: [FactoryService, FeatureFlagRoutesService],
                },
                // Providing `ANALYZE_FOR_ENTRY_COMPONENTS` to match how Angular's `provideRoute` Provider helper works
                // They also pass `ROUTES` value as `ANALYZE_FOR_ENTRY_COMPONENTS`
                {
                    provide: ANALYZE_FOR_ENTRY_COMPONENTS,
                    multi: true,
                    useValue: ROUTES,
                },
            ],
        };
    }
}
